package amymialee.blackpowder.bullet;

import amymialee.blackpowder.items.StartupCommon;
import com.google.common.collect.Sets;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.LivingEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.CompoundNBT;
import net.minecraft.nbt.ListNBT;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;
import net.minecraft.particles.ParticleTypes;
import net.minecraft.potion.EffectInstance;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionUtils;
import net.minecraft.potion.Potions;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.World;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

import java.util.Collection;
import java.util.Set;

public class BulletEntity extends AbstractBulletEntity {
    private static final DataParameter<Integer> COLOR = EntityDataManager.createKey(BulletEntity.class, DataSerializers.VARINT);

    public BulletEntity(EntityType<? extends BulletEntity> type, World worldIn) {
        super(type, worldIn);
    }

    public BulletEntity(World worldIn, LivingEntity shooter) {
        super(StartupCommon.bulletEntityType, shooter, worldIn);
    }

    protected void registerData() {
        super.registerData();
        this.dataManager.register(COLOR, -1);
    }

    public void tick() {
        super.tick();
        if (this.world.isRemote) {
            if (this.inGround) {
                if (this.timeInGround % 5 == 0) {
                    this.spawnParticles(1);
                }
            } else {
                this.spawnParticles(2);
            }
        }
    }

    private void spawnParticles(int particleCount) {
        if (particleCount > 0) {
            for(int j = 0; j < particleCount; ++j) {
                this.world.addParticle(ParticleTypes.SMOKE, this.getPosXRandom(0.5D), this.getPosYRandom(), this.getPosZRandom(0.5D), 0, 50, 0);
            }
        }
    }

    public void readAdditional(CompoundNBT compound) {
        super.readAdditional(compound);
    }

    @Override
    protected ItemStack getArrowStack() {
        return null;
    }

    protected void arrowHit(LivingEntity living) {
        super.arrowHit(living);
    }
}
